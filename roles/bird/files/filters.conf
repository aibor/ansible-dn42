include "community_filters.conf";

function is_self_ip4() {
  if net.len != 32 then return false;
  return net.ip = OWNIP4;
}

function is_self_ip6() {
  if net.len != 128 then return false;
  return net.ip = OWNIP6;
}

function is_self_ip() {
  case net.type {
    NET_IP4: return is_self_ip4();
    NET_IP6: return is_self_ip6();
    else:    return false;
  }
}

function is_self_net4() {
  return net ~ OWNNETSET4;
}

function is_self_net6() {
  return net ~ OWNNETSET6;
}

function is_self_net() {
  case net.type {
    NET_IP4: return is_self_net4();
    NET_IP6: return is_self_net6();
    else:    return false;
  }
}

function is_valid_network4() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

function is_valid_network6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

function is_valid_network() {
  case net.type {
    NET_IP4: return is_valid_network4();
    NET_IP6: return is_valid_network6();
    else:    return false;
  }
}

function rpki_valid() {
  case net.type {
    NET_IP4: return roa_check(t_roa4, net, bgp_path.last) = ROA_VALID;
    NET_IP6: return roa_check(t_roa6, net, bgp_path.last) = ROA_VALID;
    else:    return false;
  }
}

function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then bgp_local_pref = 0;
}

function honor_blackhole() {
  if (65535, 666) !~ bgp_community then return true;
  # only allow from direct peers
  if (bgp_path.len != 1) then return false;
  dest = RTD_BLACKHOLE;
  # don't re-export
  bgp_community.add((65535,65281));
  return true;
}

function bgp_import_dn42_peer(int link_latency; int link_bandwidth; int link_crypto) {
  if dest = RTD_UNREACHABLE then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): unreachable route";
  }
  if (net = fd00::/8 || net = ::/0) then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): default route";
  }
  if is_self_net() then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): own net";
  }
  if !is_valid_network() then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): invalid dn42 net";
  }
  if bgp_path.len > 100 then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): AS path too long: ", bgp_path.len;
  }
  if !rpki_valid() then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): ROA check failed";
  }

  # Prefer iroutes of direct peers.
  if (bgp_path.len = 1) then {
    bgp_local_pref = bgp_local_pref + 500;
  }

  if !honor_blackhole() then {
    reject "[", proto, "] reject import of ", net, "(", bgp_path.last, "): blackhole route";
  }
  honor_graceful_shutdown();
  update_flags(link_latency, link_bandwidth, link_crypto);

  accept;
}

function bgp_export_dn42_peer(int link_latency; int link_bandwidth; int link_crypto) {
  if (net = fd00::/8 || net = ::/0) then {
    reject "[", proto, "] reject export of ", net, ": default route";
  }
  if source !~ [RTS_DEVICE, RTS_STATIC, RTS_BGP] then {
    reject "[", proto, "] reject export of ", net, ": invalid source ", source;
  }
  if !is_valid_network() then {
    reject "[", proto, "] reject export of ", net, ": invalid dn42 net";
  }

  update_flags(link_latency, link_bandwidth, link_crypto);
  if is_self_net() then update_region();

  bgp_med = 0;
  bgp_med = bgp_med + ( ( 4 - ( link_crypto - 30 ) ) * 600 );
  bgp_med = bgp_med + ( ( 9 - ( link_bandwidth - 20 ) ) * 100);
  bgp_med = bgp_med + ( ( link_latency - 1) * 300);

  accept;
}

filter f_kernel_export {
  if is_self_ip() then {
    reject "[", proto, "] reject export of ", net, ": own ip";
  }
  if ospf_router_id = OWNIP4 then {
    reject "[", proto, "] reject export of ", net, ": local ip";
  }
#  if source < RTS_OSPF then {
#    reject "[", proto, "] reject export of ", net, ": invalid source ", source;
#  }

  case net.type {
    NET_IP4: krt_prefsrc = OWNIP4;
    NET_IP6: krt_prefsrc = OWNIP6;
  }

  accept;
};

filter f_ospf_import
{
  if is_self_net() && source != RTS_BGP then accept;
  reject;
}

filter f_dn42_route_collector {
  if !is_valid_network() then reject;
  if source !~ [ RTS_DEVICE, RTS_STATIC, RTS_BGP ] then reject;
  if is_self_net() then update_region();
  accept;
}

filter f_ibgp {
  if source = RTS_BGP && is_valid_network() && !is_self_net() then accept;
  reject;
}

filter f_bgp_only {
  if source = RTS_BGP then accept;
  reject;
}

filter f_not_static {
  if source = RTS_STATIC then reject;
  accept;
}

filter f_local_svc {
  if ifname ~ "svc-*" then accept;
  reject;
}
